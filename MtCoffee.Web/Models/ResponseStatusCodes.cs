
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;

namespace MtCoffee.Web.Models
{
    public class ResponseStatusCode
    {
//---------------------------------------------------------------------------------------------------
// V A L U E S _ L I S T 
//---------------------------------------------------------------------------------------------------



        ///<summary>
        /// "Something went wrong on an API server we call."
        ///</summary>
        public static readonly ResponseStatusCode EXTERNAL_SERVER_ERROR = new ResponseStatusCode(){ Name = "EXTERNAL_SERVER_ERROR", Description = "Something went wrong on an API server we call."};


        ///<summary>
        /// "Access is forbidden."
        ///</summary>
        public static readonly ResponseStatusCode FORBIDDEN = new ResponseStatusCode(){ Name = "FORBIDDEN", Description = "Access is forbidden."};


        ///<summary>
        /// "Something went wrong on the server."
        ///</summary>
        public static readonly ResponseStatusCode INTERNAL_SERVER_ERROR = new ResponseStatusCode(){ Name = "INTERNAL_SERVER_ERROR", Description = "Something went wrong on the server."};


        ///<summary>
        /// "Some or all of the arguments are invalid. Please fix the listed errors."
        ///</summary>
        public static readonly ResponseStatusCode INVALID_ARGUMENTS = new ResponseStatusCode(){ Name = "INVALID_ARGUMENTS", Description = "Some or all of the arguments are invalid. Please fix the listed errors."};


        ///<summary>
        /// "The ModelState was invalid. Please fix the listed errors."
        ///</summary>
        public static readonly ResponseStatusCode INVALID_MODEL_STATE = new ResponseStatusCode(){ Name = "INVALID_MODEL_STATE", Description = "The ModelState was invalid. Please fix the listed errors."};


        ///<summary>
        /// "No user could be found by the identifier specified. A valid user was required."
        ///</summary>
        public static readonly ResponseStatusCode INVALID_USER = new ResponseStatusCode(){ Name = "INVALID_USER", Description = "No user could be found by the identifier specified. A valid user was required."};


        ///<summary>
        /// "The request was not successful."
        ///</summary>
        public static readonly ResponseStatusCode NON_SUCCESS = new ResponseStatusCode(){ Name = "NON_SUCCESS", Description = "The request was not successful."};


        ///<summary>
        /// "Authorization is required."
        ///</summary>
        public static readonly ResponseStatusCode NOT_AUTHORIZED = new ResponseStatusCode(){ Name = "NOT_AUTHORIZED", Description = "Authorization is required."};


        ///<summary>
        /// "The requested item could not be found. This should only be used when finding NO item will result in a failure of the method call. If you can find no results and still call it a success, then use the SUCCESS status code."
        ///</summary>
        public static readonly ResponseStatusCode NOT_FOUND = new ResponseStatusCode(){ Name = "NOT_FOUND", Description = "The requested item could not be found. This should only be used when finding NO item will result in a failure of the method call. If you can find no results and still call it a success, then use the SUCCESS status code."};


        ///<summary>
        /// "This resource has not been configured correctly. Configuration may be in progress, or something unexpected has occurred. This response status code shouldn't occur, but if it does, we give it a very obvious failure message that tells us that we need to fix something."
        ///</summary>
        public static readonly ResponseStatusCode NOT_YET_CONFIGURED = new ResponseStatusCode(){ Name = "NOT_YET_CONFIGURED", Description = "This resource has not been configured correctly. Configuration may be in progress, or something unexpected has occurred. This response status code shouldn't occur, but if it does, we give it a very obvious failure message that tells us that we need to fix something."};


        ///<summary>
        /// "The resource requested has been discontinued and can no longer be accessed."
        ///</summary>
        public static readonly ResponseStatusCode RESOURCE_IS_DISCONTINUED = new ResponseStatusCode(){ Name = "RESOURCE_IS_DISCONTINUED", Description = "The resource requested has been discontinued and can no longer be accessed."};


        ///<summary>
        /// "The response was successful."
        ///</summary>
        public static readonly ResponseStatusCode SUCCESS = new ResponseStatusCode(){ Name = "SUCCESS", Description = "The response was successful."};


        ///<summary>
        /// "The response status has not been determined or set yet."
        ///</summary>
        public static readonly ResponseStatusCode UNKNOWN = new ResponseStatusCode(){ Name = "UNKNOWN", Description = "The response status has not been determined or set yet."};


		private static List<ResponseStatusCode> _list { get; set; } = null;
		public static List<ResponseStatusCode> ToList()
		{
			if (_list == null)
			{
				_list = typeof(ResponseStatusCode).GetFields().Where(x => x.IsStatic && x.IsPublic && x.FieldType == typeof(ResponseStatusCode))
					.Select(x => x.GetValue(null)).OfType<ResponseStatusCode>().ToList();
			}

			return _list;
		}

		public static List<ResponseStatusCode> Values()
		{
			return ToList();
		}

        /// <summary>
        /// Returns the enum value based on the matching Name of the enum. Case-insensitive search.
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public static ResponseStatusCode ValueOf(string key)
		{
            return ToList().FirstOrDefault(x => string.Compare(x.Name, key, true) == 0);
        }


//---------------------------------------------------------------------------------------------------
// I N S T A N C E _ D E F I N I T I O N 
//---------------------------------------------------------------------------------------------------		
        public string Name { get; set; }
        public string  Description { get; set; }
        public override string ToString() { return this.Name; }

		/// <summary>
        /// Implcitly converts to string.
        /// </summary>
        /// <param name="d"></param>
        public static implicit operator string(ResponseStatusCode d)
        {
            return d.ToString();
        }

        /// <summary>
        /// Compares based on the == method. Handles nulls gracefully.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool operator !=(ResponseStatusCode a, ResponseStatusCode b)
        {
            return !(a == b);
        }

        /// <summary>
        /// Compares based on the .Equals method. Handles nulls gracefully.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool operator ==(ResponseStatusCode a, ResponseStatusCode b)
        {
            return a?.ToString() == b?.ToString();
        }

        /// <summary>
        /// Compares based on the .ToString() method
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public override bool Equals(object o)
        {
            return this.ToString() == o?.ToString();
        }

        /// <summary>
        /// Compares based on the .Name property
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return this.Name.GetHashCode();
        }
    }
}
    



